<unit language="Java" filename="C:\Users\Sylvain\Desktop\gistfile1.java">
  <package>package<name>cse</name>;</package>
  <import>import<name>java</name>.<name>util</name>.<name>List</name>;</import>
  <comment type="javadoc">/**
 * CodeQuery specifies a list of methods for querying source code. 
 * It is designed with Java in mind but should work with many other languages as well.
 * The metamodel of code abstracts over the language (see in TypeKind for example).
 * The queries are inspired from Eclipse Java Search.
 * 
 * A performance contest on a large corpus of Java source code will be organized.
 * 
 * Pull requests on GitHub welcome!
 * 
 * @author Martin Monperrus &lt;martin.monperrus@univ-lille1.fr&gt;
 *
 */</comment>
  <class type="interface">
    <specifier>public</specifier>interface<name>CodeSearchEngine</name>
    <block>{<enum>enum<name>TypeKind</name>
        <block>{<expr>
            <name>CLASS</name>
          </expr>,<expr>
            <name>INTERFACE</name>
          </expr>,<expr>
            <name>ENUM</name>
          </expr>,<expr>
            <name>PRIMITIVE</name>
          </expr>,<expr>
            <name>EXCEPTION</name>
          </expr>,<expr>
            <name>ANNOTATION</name>
          </expr>}</block>interface<name>Location</name>
        <block>{<expr>
            <name>String</name>
            <call>
              <name>getFilePath</name>
              <argument_list>()</argument_list>
            </call>
          </expr>
        </block>;</enum>
      <function_decl>
        <type>
          <name>String</name>
        </type>
        <name>getLineNumber</name>
        <parameter_list>()</parameter_list>;</function_decl>
      <comment type="line">// optional</comment>}</block>
  </class>
  <class type="interface">interface<name>Type</name>
    <block>{<function_decl>
        <type>
          <name>String</name>
        </type>
        <name>getName</name>
        <parameter_list>()</parameter_list>;</function_decl>
      <function_decl>
        <type>
          <name>String</name>
        </type>
        <name>getFullyQualifiedPackageName</name>
        <parameter_list>()</parameter_list>;</function_decl>
      <function_decl>
        <type>
          <name>String</name>
        </type>
        <name>getKind</name>
        <parameter_list>()</parameter_list>;</function_decl>
      <function_decl>
        <type>
          <name>Location</name>
        </type>
        <name>getDeclaration</name>
        <parameter_list>()</parameter_list>;</function_decl>}</block>
  </class>
  <class type="interface">interface<name>Member</name>
    <block>{<function_decl>
        <type>
          <name>Type</name>
        </type>
        <name>getType</name>
        <parameter_list>()</parameter_list>;</function_decl>
      <function_decl>
        <type>
          <name>String</name>
        </type>
        <name>getName</name>
        <parameter_list>()</parameter_list>;</function_decl>}</block>
  </class>
  <class type="interface">interface<name>Field</name>
    <super>
      <extends>extends<name>Member</name>
      </extends>
    </super>
    <block>{}</block>
  </class>
  <class type="interface">interface<name>Method</name>
    <super>
      <extends>extends<name>Member</name>
      </extends>
    </super>
    <block>{<function_decl>
        <type>
          <name>
            <name>List</name>
            <argument_list>&lt;<argument>
                <name>Type</name>
              </argument>&gt;</argument_list>
          </name>
        </type>
        <name>getParamaters</name>
        <parameter_list>()</parameter_list>;</function_decl>}</block>
  </class>
  <comment type="javadoc">/** returns the location of class className */</comment>
  <function_decl>
    <type>
      <name>Type</name>
    </type>
    <name>findType</name>
    <parameter_list>(<param>
        <decl>
          <type>
            <name>String</name>
          </type>
          <name>className</name>
        </decl>
      </param>)</parameter_list>;</function_decl>
  <comment type="javadoc">/** returns all subclasses of class className */</comment>
  <function_decl>
    <type>
      <name>
        <name>List</name>
        <argument_list>&lt;<argument>
            <name>Type</name>
          </argument>&gt;</argument_list>
      </name>
    </type>
    <name>findSubTypesOf</name>
    <parameter_list>(<param>
        <decl>
          <type>
            <name>String</name>
          </type>
          <name>className</name>
        </decl>
      </param>)</parameter_list>;</function_decl>
  <comment type="javadoc">/** returns all fields typed with className */</comment>
  <function_decl>
    <type>
      <name>
        <name>List</name>
        <argument_list>&lt;<argument>
            <name>Field</name>
          </argument>&gt;</argument_list>
      </name>
    </type>
    <name>findFieldsTypedWith</name>
    <parameter_list>(<param>
        <decl>
          <type>
            <name>String</name>
          </type>
          <name>className</name>
        </decl>
      </param>)</parameter_list>;</function_decl>
  <comment type="javadoc">/** returns all read accesses of the field given as parameter */</comment>
  <function_decl>
    <type>
      <name>
        <name>List</name>
        <argument_list>&lt;<argument>
            <name>Location</name>
          </argument>&gt;</argument_list>
      </name>
    </type>
    <name>findAllReadAccessesOf</name>
    <parameter_list>(<param>
        <decl>
          <type>
            <name>Field</name>
          </type>
          <name>field</name>
        </decl>
      </param>)</parameter_list>;</function_decl>
  <comment type="javadoc">/** returns all write accesses of the field given as parameter (this.foo = ... ) */</comment>
  <function_decl>
    <type>
      <name>
        <name>List</name>
        <argument_list>&lt;<argument>
            <name>Location</name>
          </argument>&gt;</argument_list>
      </name>
    </type>
    <name>findAllWriteAccessesOf</name>
    <parameter_list>(<param>
        <decl>
          <type>
            <name>Field</name>
          </type>
          <name>field</name>
        </decl>
      </param>)</parameter_list>;</function_decl>
  <comment type="javadoc">/** returns all methods of className (does not consider the inherited methods) */</comment>
  <function_decl>
    <type>
      <name>
        <name>List</name>
        <argument_list>&lt;<argument>
            <name>Method</name>
          </argument>&gt;</argument_list>
      </name>
    </type>
    <name>findMethodsOf</name>
    <parameter_list>(<param>
        <decl>
          <type>
            <name>String</name>
          </type>
          <name>className</name>
        </decl>
      </param>)</parameter_list>;</function_decl>
  <comment type="javadoc">/** returns all methods returning className */</comment>
  <function_decl>
    <type>
      <name>
        <name>List</name>
        <argument_list>&lt;<argument>
            <name>Method</name>
          </argument>&gt;</argument_list>
      </name>
    </type>
    <name>findMethodsReturning</name>
    <parameter_list>(<param>
        <decl>
          <type>
            <name>String</name>
          </type>
          <name>className</name>
        </decl>
      </param>)</parameter_list>;</function_decl>
  <comment type="javadoc">/** returns all methods using className as parameter */</comment>
  <function_decl>
    <type>
      <name>
        <name>List</name>
        <argument_list>&lt;<argument>
            <name>Method</name>
          </argument>&gt;</argument_list>
      </name>
    </type>
    <name>findMethodsTakingAsParameter</name>
    <parameter_list>(<param>
        <decl>
          <type>
            <name>String</name>
          </type>
          <name>className</name>
        </decl>
      </param>)</parameter_list>;</function_decl>
  <comment type="javadoc">/** returns all methods called methodName */</comment>
  <function_decl>
    <type>
      <name>
        <name>List</name>
        <argument_list>&lt;<argument>
            <name>Method</name>
          </argument>&gt;</argument_list>
      </name>
    </type>
    <name>findMethodsCalled</name>
    <parameter_list>(<param>
        <decl>
          <type>
            <name>String</name>
          </type>
          <name>methodName</name>
        </decl>
      </param>)</parameter_list>;</function_decl>
  <comment type="javadoc">/** returns all methods overriding method methodName that is in className */</comment>
  <function_decl>
    <type>
      <name>
        <name>List</name>
        <argument_list>&lt;<argument>
            <name>Method</name>
          </argument>&gt;</argument_list>
      </name>
    </type>
    <name>findOverridingMethodsOf</name>
    <parameter_list>(<param>
        <decl>
          <type>
            <name>Method</name>
          </type>
          <name>method</name>
        </decl>
      </param>)</parameter_list>;</function_decl>
  <comment type="javadoc">/** returns all locations where there is an instance creation of className: new X() */</comment>
  <function_decl>
    <type>
      <name>
        <name>List</name>
        <argument_list>&lt;<argument>
            <name>Location</name>
          </argument>&gt;</argument_list>
      </name>
    </type>
    <name>findNewOf</name>
    <parameter_list>(<param>
        <decl>
          <type>
            <name>String</name>
          </type>
          <name>className</name>
        </decl>
      </param>)</parameter_list>;</function_decl>
  <comment type="javadoc">/** returns all locations where there is a cast to className */</comment>
  <function_decl>
    <type>
      <name>
        <name>List</name>
        <argument_list>&lt;<argument>
            <name>Location</name>
          </argument>&gt;</argument_list>
      </name>
    </type>
    <name>findCastsTo</name>
    <parameter_list>(<param>
        <decl>
          <type>
            <name>String</name>
          </type>
          <name>className</name>
        </decl>
      </param>)</parameter_list>;</function_decl>
  <comment type="javadoc">/** returns all locations where there is an instanceof check to className */</comment>
  <function_decl>
    <type>
      <name>
        <name>List</name>
        <argument_list>&lt;<argument>
            <name>Location</name>
          </argument>&gt;</argument_list>
      </name>
    </type>
    <name>findInstanceOf</name>
    <parameter_list>(<param>
        <decl>
          <type>
            <name>String</name>
          </type>
          <name>className</name>
        </decl>
      </param>)</parameter_list>;</function_decl>
  <comment type="javadoc">/** returns all methods throwing this exception */</comment>
  <function_decl>
    <type>
      <name>
        <name>List</name>
        <argument_list>&lt;<argument>
            <name>Method</name>
          </argument>&gt;</argument_list>
      </name>
    </type>
    <name>findMethodsThrowing</name>
    <parameter_list>(<param>
        <decl>
          <type>
            <name>String</name>
          </type>
          <name>exceptionName</name>
        </decl>
      </param>)</parameter_list>;</function_decl>
  <comment type="javadoc">/** returns all locations where there is a cast to className */</comment>
  <function_decl>
    <type>
      <name>
        <name>List</name>
        <argument_list>&lt;<argument>
            <name>Location</name>
          </argument>&gt;</argument_list>
      </name>
    </type>
    <name>findCatchOf</name>
    <parameter_list>(<param>
        <decl>
          <type>
            <name>String</name>
          </type>
          <name>exceptionName</name>
        </decl>
      </param>)</parameter_list>;</function_decl>
  <comment type="javadoc">/** returns all classes annotated with annotationName */</comment>
  <function_decl>
    <type>
      <name>
        <name>List</name>
        <argument_list>&lt;<argument>
            <name>Type</name>
          </argument>&gt;</argument_list>
      </name>
    </type>
    <name>findClassesAnnotatedWith</name>
    <parameter_list>(<param>
        <decl>
          <type>
            <name>String</name>
          </type>
          <name>annotationName</name>
        </decl>
      </param>)</parameter_list>;</function_decl>}</unit>